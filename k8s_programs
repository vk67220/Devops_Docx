---
apiVersion: v1
kind: Pod #Kind is written as Pod, because we are creating a POD here
metadata:
  name: javawebapppod #its a pod name
  labels: #to identify pods in the cluster, we will give labels. Label is an ID for the Pod
    app: javawebapp #pod label
spec: #here we will specify what we want to do with pod
  containers: #here we are creating a container
    - name: javawebappcontainer #container name
      image: kastrov/javaappkastro
      ports: #port mapping
        - containerPort: 8080 #any number can be given
---

---
apiVersion: v1
kind: Service
metadata: 
  name: javawebappsvc #Service name. Any name can be given
spec: # used to identify the lable of a pod
  type: NodePort
  selector: # it is used to identify the pod by using pod label
    app: javawebapp
  ports: 
  - port: 80 #serivce cluster host port
    targetPort: 8080 #container port
---

Manifest file (2 in 1): Pod and service manifests are in the same file
---
apiVersion: v1
kind: Pod
metadata: 
  name: javawebapppod
  labels:
    app: javawebapp
spec:
  containers:
    - name: javawebappcontainer
      image: kastrov/zomato
      ports:
        - containerPort: 3000
---
apiVersion: v1
kind: Service
metadata: 
  name: javawebappsvc
spec:
  type: NodePort
  selector: 
    app: javawebapp
  ports: 
    - port: 80
      targetPort: 3000
      nodePort: 31877 #any number can be given but it has to be b/w 30000 and 32767
---

Create the pod
Check in which worker node the pod is created
Open the port given in above service manifest file of worker node security group
access the app: http://13.127.196.123:31877/


Namespace with service loadbalancer
---
apiVersion: v1
kind: Namespace
metadata:
   name: kastrons
---
apiVersion: v1
kind: Pod
metadata:
  name: javawebapppod
  labels:
    name: javawebapp
  namespace: kastrons 
spec:
  containers:
  - name: javawebappcontainer
    image: kastrov/swiggy
    ports:
     - containerPort: 3000
---
apiVersion: v1
kind: Service
metadata:
  name: javawebappsvc
  namespace: kastrons
spec:
  type: LoadBalancer
  selector:
    app: javawebapp
  ports:
  - port: 80
    targetPort: 3000
    nodePort: 31700
 ---

Replication Controller

---
apiVersion: v1
kind: ReplicationController
metadata:
  name: javawebapprc
spec:
  replicas: 3
  selector:
    app: javawebapp
  template:
    metadata:
      name: javawebapppod
      labels:
        app: javawebapp
    spec:
      containers:
        - name: javawebappcontainers
          image: kastrov/swiggy
          ports:
            - containerPort: 3000
---
apiVersion: v1
kind: Service
metadata:
  name: javawebappsvc
spec:
  type: NodePort
  selector:
    app: javawebapp
  ports:
  - port: 80
    targetPort: 3000
    nodePort: 30999
 ---

ReplicaSet

---
apiVersion: v1
kind: RelicaSet 
metadata:
  name: javawebapprs
spec:
   replicas: 3
   selector:
     matchLabels:
       app: javawebapp
     template:
       metadata:
         name: javawebapppod
         labels:
           app: javawebapp
       spec:
         containers:
           name: javawebappcontainer
           image: kastrov/bms
           ports:
             containerport: 3000
---
apiVersion: v1
kind: apiVersion: v1
kind: Service
metadata:
  name: javawebappsvc
spec:
  type: NodePort
  selector: 
    app: javawebapp
  ports:
  - port: 80
    targetPort: 3000
    nodePort: 31000
---


Deployment

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: javawebappdeployment
spec:
  replicas: 2
  strategy:
    type: ReCreate
  selector:
    matchLabels:
      app: javawebapp
  template:
    metadata:
      labels:
        app: javawebapp
    spec:  
      containers:
      - name: javawebappcontainer
        image: kastrov/zomato
        ports:
        - containerPort: 3000

---
apiVersion: v1
kind: Service
metadata:
  name: javawebappsvc
spec:
  type: NodePort
  selector:
    app: javawebapp
  ports:
  - port: 80
    targetPort: 3000
    nodePort: 31000
---

above script do statefulset 
