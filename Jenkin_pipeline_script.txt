pipeline {
    agent any

    tools {
        maven 'maven3' // Specifies Maven tool configuration in Jenkins
    }

    stages {
        stage('Clone the Code') {
            steps {
                // Clones the repository from the provided Git URL
                git 'https://github.com/vk67220/Netflix-Pipeline-Project.git'
            }
        }

        stage('Maven Build') {
            steps {
                script {
                    // Gets the path to the Maven installation defined in Jenkins
                    def mavenHome = tool name: 'maven3', type: 'maven'

                    // Forms the Maven command path
                    def mavenCMD = "${mavenHome}/bin/mvn"

                    // Executes the Maven build command with parallel execution and skipping tests
                    sh "${mavenCMD} clean package -T 1C -DskipTests"
                }
            }
        }

        stage('Deploy Stage') {
            steps {
                script {
                    // Ensure the target directory exists before copying
                    sh 'ls -l target'

                    // Deploy the WAR file to Tomcat
                    sh 'sudo cp target/NETFLIX-1.2.2.war /home/ec2-user/apache-tomcat-9.0.98/webapps'
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
        always {
            echo 'Cleaning up after build...'
            cleanWs() // Clean workspace after build
        }
    }
} 


war file name will be given by using <artifactId>-<version>.war it is found in pom.xml


pipeline {
    agent {
        label 'Slave1'
    }

    tools {
        maven 'maven3'
    }

    stages {
        stage('Clone the Code') {
            steps {
                git 'https://github.com/vk67220/Netflix-Pipeline-Project.git'
            }
        }

        stage('Maven Build') {
            steps {
                script {
                    def mavenHome = tool name: 'maven3', type: 'maven'
                    def mavenCMD = "${mavenHome}/bin/mvn"
                    sh "${mavenCMD} clean package -T 1C -DskipTests"
                }
            }
        }

        stage('Deploy to Tomcat on Master') {
            steps {
                sshagent(['71717927-287d-49a1-a3ad-f0362096874e']) {
                    script {
                        // Deploy the WAR file to the master node's Tomcat webapps folder
                        sh '''scp -o StrictHostKeyChecking=no target/NETFLIX-1.2.2.war ec2-user@18.226.165.119:/home/ec2-user/apache-tomcat-9.0.98/webapps/'''
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
        always {
            echo 'Cleaning up after build...'
            cleanWs()  // Clean workspace after build
        }
    }
}

Do below steps to perform the above script

Ensure the SSH Agent Plugin is installed:

Navigate to Manage Jenkins → Plugin Manager → Installed tab.

sudo chown -R ec2-user:ec2-user /home/ec2-user/apache-tomcat-9.0.98/webapps/
sudo chmod -R 755 /home/ec2-user/apache-tomcat-9.0.98/webapps/

Add ec2-user to the sudoers file for passwordless sudo access:
sudo visudo
ec2-user ALL=(ALL) NOPASSWD: ALL



pipeline {
    agent {
        label 'Slave1'
    }

    tools {
        maven 'maven3'
    }

    stages {
        stage('Clone the Code') {
            steps {
                git 'https://github.com/vk67220/Netflix-Pipeline-Project.git'
            }
        }

        stage('Maven Build') {
            steps {
                script {
                    def mavenHome = tool name: 'maven3', type: 'maven'
                    def mavenCMD = "${mavenHome}/bin/mvn"
                    sh "${mavenCMD} clean package -T 1C -DskipTests"
                }
            }
        }

        stage('Copy WAR to Local Tomcat') {
            steps {
                script {
                    sh '''
                    # Move the WAR file to Tomcat's webapps directory
                    TOMCAT_DIR="/home/ec2-user/apache-tomcat-9.0.98/webapps"
                    WAR_FILE="target/NETFLIX-1.2.2.war"

                    # Ensure the target directory exists
                    if [ ! -d "$TOMCAT_DIR" ]; then
                        echo "Error: Target Tomcat directory does not exist: $TOMCAT_DIR"
                        exit 1
                    fi

                    # Copy the WAR file
                    cp "$WAR_FILE" "$TOMCAT_DIR/"
                    echo "WAR file copied to Tomcat webapps directory successfully."
                    '''
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
        always {
            echo 'Cleaning up after build...'
            cleanWs()  // Clean workspace after build
        }
    }
}


Following steps to be done before build the job

sudo chown -R ec2-user:ec2-user /home/ec2-user/apache-tomcat-9.0.98/webapps
sudo chmod -R u+w /home/ec2-user/apache-tomcat-9.0.98/webapps







pipeline {
    agent any
    
    tools {
        maven 'maven3'
    }
    
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        DOCKERHUB_USERNAME = 'prasad5806'  // Set this directly to your Docker Hub username
        DOCKER_IMAGE = "${DOCKERHUB_USERNAME}maven-web-app:latest"
    }
    
    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/vk67220/Docker-SpringBoot-Project.git'
            }
        }
        
        stage('Compilation') {
            steps {
                sh 'mvn compile'
            }
        }
        
        stage('Test') {
            steps {
                sh 'mvn test'
            }
        }
        
        stage('Sonar Analysis') {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh "${SCANNER_HOME}/bin/sonar-scanner -Dsonar.projectName=Kastro -Dsonar.projectKey=KastroKey -Dsonar.java.binaries=target"
                }
            }
        }
        
        stage('Build Job') {
            steps {
                sh 'mvn clean package'
            }
        }
        
        stage('Deploy Artifacts') {
            steps {
                withMaven(globalMavenSettingsConfig: 'settings.xml', jdk: 'jdk17', maven: 'maven3', traceability: true) {
                    sh 'mvn deploy'
                }
            }
        }
        
        stage('Docker Build') {
            steps {
                script {
                    sh "docker build -t ${DOCKER_IMAGE} ."
                }
            }
        }
        
        stage('Docker Push to DockerHub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                    sh "docker login -u ${DOCKERHUB_USERNAME} -p ${DOCKERHUB_PASSWORD}"
                    sh "docker push ${DOCKER_IMAGE}"
                }
            }
        }
        
        stage('Run Docker Container') {
            steps {
                script {
                    sh "docker stop maven-web-app || true && docker rm maven-web-app || true"
                    sh "docker run -d --name maven-web-app -p 5555:5555 ${DOCKER_IMAGE}"
                }
            }
        }
    }
}




pipeline {
    agent any
    
    tools {
        maven 'maven3'
        
    }
    
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        DOCKERHUB_USERNAME = 'prasad5806'  // Set this directly to your Docker Hub username
        DOCKER_IMAGE = "${DOCKERHUB_USERNAME}/maven-web-app:latest"  // Ensure correct Docker image naming format
    }
    
    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/vk67220/Docker-SpringBoot-Project.git'
            }
        }
        
        stage('Compilation') {
            steps {
                sh 'mvn compile'
            }
        }
        
        stage('Test') {
            steps {
                sh 'mvn test'
            }
        }
        
        stage('Sonar Analysis') {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh "${SCANNER_HOME}/bin/sonar-scanner -Dsonar.projectName=Kastro -Dsonar.projectKey=KastroKey -Dsonar.java.binaries=target"
                }
            }
        }
        
        stage('Build Job') {
            steps {
                sh 'mvn clean package'
            }
        }
        
        stage('Deploy Artifacts') {
            steps {
                withMaven(globalMavenSettingsConfig: 'settings.xml', jdk: 'jdk17', maven: 'maven3', traceability: true) {
                    sh 'mvn deploy'
                }
            }
        }
        
        stage('Docker Build') {
            steps {
                script {
                    sh "docker build -t ${DOCKER_IMAGE} ."
                }
            }
        }
        
        stage('Docker Push to DockerHub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                    sh "docker login -u ${DOCKERHUB_USERNAME} -p ${DOCKERHUB_PASSWORD}"
                    sh "docker push ${DOCKER_IMAGE}"
                }
            }
        }
        
        stage('Run Docker Container') {
            steps {
                script {
                    sh "docker stop maven-web-app || true && docker rm maven-web-app || true"
                    sh "docker run -d --name maven-web-app -p 9090:8080 ${DOCKER_IMAGE}"
                }
            }
        }
    }
}





pipeline {
    agent any
    
    tools {
        maven 'maven3'
    }
    
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        DOCKERHUB_USERNAME = 'prasad5806'
        DOCKER_IMAGE = "${DOCKERHUB_USERNAME}/mahalogin:latest"
    }
    
    stages {
        stage('Git Checkout') {
            steps {
                git 'https://github.com/vk67220/mahalogin.git'
            }
        }
        
        stage('Compilation') {
            steps {
                sh 'mvn compile'
            }
        }
        
        stage('Test') {
            steps {
                sh 'mvn test'
            }
        }
        
        stage('Sonar Analysis') {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh "${SCANNER_HOME}/bin/sonar-scanner -Dsonar.projectName=Kastro01 -Dsonar.projectKey=Kastro01Key -Dsonar.java.binaries=target"
                }
            }
        }
        
        stage('Build Job') {
            steps {
                sh 'mvn clean package'
            }
        }
        
        stage('Verify Build Output') {
            steps {
                script {
                    if (!fileExists('target/mahaLogin-2.0.war')) {
                        error "WAR file not found! Build failed."
                    }
                }
            }
        }

        stage('Docker Build') {
            steps {
                script {
                    sh "docker build -t ${DOCKER_IMAGE} ."
                }
            }
        }
        
        stage('Docker Push to DockerHub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                    sh "docker login -u ${DOCKERHUB_USERNAME} -p ${DOCKERHUB_PASSWORD}"
                    sh "docker push ${DOCKER_IMAGE}"
                }
            }
        }
        
        stage('Run Docker Container') {
            steps {
                script {
                    sh "docker stop mahalogin || true"
                    sh "docker rm mahalogin || true"
                    sh "docker run -d --name mahalogin -p 9090:9090 ${DOCKER_IMAGE}"
                }
            }
        }
    }
}




