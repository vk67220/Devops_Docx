provider "aws"{
 alias = "us-east-2"
 region = "us-east-2"
}

provider "aws"{
  alias = "us-west-2"
  region = "us-west-2"
}
resource "aws_instance" "one"{
  ami = "ami-07f463d9d4a6f005f"
  instance_type = "t2.micro"
  count = 1
  key_name = "ohio.pem"
  provider = "aws.us-east-2"
  tags={
   Name = "abhishek verramalla"
}
}

resource "aws_instance" "two"{
 ami = "ami-000089c8d02060104"
 instance_type = "t2.micro"
 count = 2
 provider = "aws.us-west-2"
 tags={
   Name = "abhishek verramalla"
}
}




variable "instance_type" {
    description = "EC2 instance type"
    type = string
}
variable "ami_id" {
    description = "EC2 AMI id"
    type = string
}
variable "instance_count" {
    description = "EC2 instance count"
    type = number  
}
variable "environment" {
    description = "Deployment environment (dev, staging, prod)"
    type = string  
}
variable "key_name" {
    description = "EC2 key name"
    type = string
    default = "ohio.pem"
}



instance_type = "t2.small"
ami_id = "ami-07f463d9d4a6f005f"
environment = "dev"
instance_count = 2

instance_type = "t2.micro"
ami_id = "ami-07f463d9d4a6f005f"
instance_count = 1
environment = "staging"

instance_type = "t2.medium"
ami_id = "ami-07f463d9d4a6f005f"
instance_count = 1
environment = "prod"



provider "aws" {
    region = "us-east-2"
  
}
resource "aws_instance" "one" {
    ami = var.ami_id
    instance_type = var.instance_type
    count = var.instance_count
    key_name = var.key_name
  
 tags ={
    Name = "test_terraform_${var.environment}"
    environment = var.environment
  }
}
output "public_ip"{
    description = "Public ip of ec2 machines is"
    value = aws_instance.one[*].public_ip 
}



terraform plan -var-file=dev.tfvars
terraform plan -var-file=staging.tfvars
terraform plan -var-file=prod.tfvars

terraform apply --auto-approve -var-file=staging.tfvars
terraform apply --auto-approve -var-file=dev.tfvars
terraform apply --auto-approve -var-file=prod.tfvars



terraform-day4/
├── dev.tfvars                  # Environment-specific variables
├── main.tf                      # Root module
├── variables.tf                 # Root module variable declarations ✅ (MISSING BEFORE)
├── modules
│   └── ec2_instance             # Child module (Reusable EC2 code)
│       ├── main.tf              # EC2 resource definition
│       ├── outputs.tf           # Output values (e.g., Public IP)
│       └── variables.tf         # Variable definitions for the module
├── prod.tfvars                  # Environment-specific variables
├── staging.tfvars               # Environment-specific variables
└── terraform.tfstate            # Terraform state file (generated after apply)



✅ main.tf (Root Module)

provider "aws" {
  region = "us-east-2"
}

module "ec2_instance" {
  source         = "./modules/ec2_instance"   # Refers to child module
  ami_id         = var.ami_id
  instance_type  = var.instance_type
  instance_count = var.instance_count
  key_name       = var.key_name
  environment    = var.environment
}

output "ec2_public_ips" {
  description = "Public IP addresses of EC2 instances"
  value       = module.ec2_instance.public_ips
}


What’s happening here?
We define the AWS provider.
We call the ec2_instance module using source = "./modules/ec2_instance".
We pass in the required variables (like ami_id, instance_type, etc.).
We define an output to display the public IPs of the created EC2 instances.
4️⃣ Variable Declaration in Root Module (variables.tf)
Since Terraform requires variables to be declared before use, we define them in variables.tf.

✅ variables.tf (Root Module)

variable "ami_id" {
  description = "AMI ID for EC2 instance"
  type        = string
}

variable "instance_type" {
  description = "EC2 instance type"
  type        = string
}

variable "instance_count" {
  description = "Number of EC2 instances to create"
  type        = number
}

variable "key_name" {
  description = "EC2 key pair name"
  type        = string
  default     = "ohio.pem"
}

variable "environment" {
  description = "Deployment environment (dev, staging, prod)"
  type        = string
}

5️⃣ Environment-Specific Variables (.tfvars Files)

Each environment (dev, prod, staging) has its own .tfvars file, specifying different values for the declared variables.

✅ dev.tfvars (For Development Environment)

ami_id         = "ami-000089c8d02060104"
instance_type  = "t2.small"
instance_count = 2
environment    = "dev"
key_name       = "ohio.pem"
✅ prod.tfvars (For Production Environment)

ami_id         = "ami-04681163a08179f28"
instance_type  = "t2.medium"
instance_count = 3
environment    = "prod"
key_name       = "ohio.pem"
✅ staging.tfvars (For Staging Environment)

ami_id         = "ami-07f463d9d4a6f005f"
instance_type  = "t2.micro"
instance_count = 1
environment    = "staging"
key_name       = "ohio.pem"

6️⃣ Creating the EC2 Module (modules/ec2_instance/)

✅ modules/ec2_instance/variables.tf (Child Module)

The child module must declare the same variables that are passed from the root module.

variable "ami_id" {
  description = "AMI ID for EC2 instance"
  type        = string
}

variable "instance_type" {
  description = "EC2 instance type"
  type        = string
}

variable "instance_count" {
  description = "Number of EC2 instances to create"
  type        = number
}

variable "key_name" {
  description = "EC2 key pair name"
  type        = string
}

variable "environment" {
  description = "Deployment environment (dev, staging, prod)"
  type        = string
}

✅ modules/ec2_instance/main.tf (Child Module)

This file defines how EC2 instances are created.

resource "aws_instance" "example" {
  ami           = var.ami_id
  instance_type = var.instance_type
  count         = var.instance_count
  key_name      = var.key_name

  tags = {
    Name        = "terraform_ec2_${var.environment}"
    Environment = var.environment
  }
}

✅ modules/ec2_instance/outputs.tf (Child Module)

Outputs the public IPs of the created instances.


output "public_ips" {
  description = "Public IP addresses of the EC2 instances"
  value       = aws_instance.example[*].public_ip
}


.
├── main.tf
├── modules
│   └── ec2_instance
│       ├── main.tf
│       ├── outputs.tf
│       └── variables.tf
├── terraform.tfstate
└── terraform.tfstate.backup

main.tf

provider "aws" {
    region = "us-east-2"
}

module "ec2_instance" {
    source         = "./modules/ec2_instance"
    ami_id         = "ami-07f463d9d4a6f005f"
    instance_type  = "t2.micro"
    instance_count = 2
    key_name       = "ohio.pem"
}

output "ec2_public_ips" {
  description = "Public IP addresses of EC2 instances"
  value       = module.ec2_instance.public_ip
}

variables.tf

variable "instance_type" {
  description = "Ec2 instance type"
  type = string
}
variable "instance_count" {
    description = "Ec2 no of instance to be created"
    type = number

}
variable "ami_id" {
    description = "Ec2 ami id details"
    type = string

}
variable "key_name" {
    description = "Ec2 key pair details"
    type = string
}





output "public_ip" {
    value = aws_instance.example[*].public_ip
  }




provider "aws" {
    region = "us-east-2"

}
resource "aws_instance" "example" {
    ami = var.ami_id
    count = var.instance_count
    instance_type = var.instance_type
    key_name = var.key_name
    tags = {
      Name = "terraform_ec2"
    }

}






Scenario:-



resource "aws_vpc" "my_vpc" {
  cidr_block = "10.0.0.0/24"

  tags = {
    Name = "MyVPC"
  }
}

resource "aws_internet_gateway" "my_igw" {
  vpc_id = aws_vpc.my_vpc.id

  tags = {
    Name = "MyInternetGateway"
  }
}

resource "aws_subnet" "public_subnet" {
  vpc_id            = aws_vpc.my_vpc.id
  cidr_block        = "10.0.0.0/25" # Adjust CIDR block as needed
  map_public_ip_on_launch = true

  tags = {
    Name = "PublicSubnet"
  }
}

resource "aws_subnet" "private_subnet" {
  vpc_id     = aws_vpc.my_vpc.id
  cidr_block = "10.0.0.128/25" # Adjust CIDR block as needed

  tags = {
    Name = "PrivateSubnet"
  }
}

resource "aws_route_table" "public_rt" {
  vpc_id = aws_vpc.my_vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.my_igw.id
  }

  tags = {
    Name = "PublicRouteTable"
  }
}

resource "aws_route_table_association" "public_assoc" {
  subnet_id      = aws_subnet.public_subnet.id
  route_table_id = aws_route_table.public_rt.id
}

resource "aws_route_table" "private_rt" {
  vpc_id = aws_vpc.my_vpc.id

  tags = {
    Name = "PrivateRouteTable"
  }
}

resource "aws_route_table_association" "private_assoc" {
  subnet_id      = aws_subnet.private_subnet.id
  route_table_id = aws_route_table.private_rt.id
}

resource "aws_security_group" "my_sg" {
  vpc_id = aws_vpc.my_vpc.id

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "MySecurityGroup"
  }
}

resource "aws_instance" "public_instance" {
  ami             = "ami-07f463d9d4a6f005f" # Replace with a valid AMI ID
  instance_type   = "t2.micro"
  subnet_id       = aws_subnet.public_subnet.id  # Only reference subnet_id once
  key_name        = "ohio.pem"
  vpc_security_group_ids = [aws_security_group.my_sg.id]  # Correct security group reference

  tags = {
    Name = "PublicEC2Instance"
  }
}


terraform plan

terraform apply --auto-approve



scenario:-

variables.tf

variable "vpc_cidr" {
  description = "CIDR block for the VPC"
  type        = string
}

variable "subnet_cidrs" {
  description = "List of subnet CIDR blocks"
  type        = list(string)
}

variable "ports" {
  description = "List of ports for security group rules"
  type        = list(string)
  default     = ["22", "80"]
}

variable "subnet_tags" {
  description = "List of tags for subnets"
  type        = list(string)
  default     = ["pubsub", "privsub"]
}

variable "subnet_names" {
  description = "List of names for subnets"
  type        = list(string)
  default     = ["pubsub", "privsub"]
}

variable "from_whom" {
  description = "The source IP or CIDR blocks to allow in security group"
  type        = string
}

variable "instance_ami" {
  description = "ami_id of an instance"
  type = string
  default = "ami-07f463d9d4a6f005f"
}

variable "instance_type" {
  description = "instance type of any ec2"
  type = string
  default = "t2.micro"
}


main.tf

variable "vpc_cidr" {
  description = "CIDR block for the VPC"
  type        = string
}

variable "subnet_cidrs" {
  description = "List of subnet CIDR blocks"
  type        = list(string)
}

variable "ports" {
  description = "List of ports for security group rules"
  type        = list(string)
  default     = ["22", "80"]
}

variable "subnet_tags" {
  description = "List of tags for subnets"
  type        = list(string)
  default     = ["pubsub", "privsub"]
}

variable "subnet_names" {
  description = "List of names for subnets"
  type        = list(string)
  default     = ["pubsub", "privsub"]
}

variable "from_whom" {
  description = "The source IP or CIDR blocks to allow in security group"
  type        = string
}

variable "instance_ami" {
  description = "ami_id of an instance"
  type = string
  default = "ami-07f463d9d4a6f005f"
}

variable "instance_type" {
  description = "instance type of any ec2"
  type = string
  default = "t2.micro"
}

[root@ip-172-31-0-231 terraform-day5]# cat main.tf 
resource "aws_vpc" "my_vpc" {
  cidr_block = var.vpc_cidr

  tags = {
    Name = "MyVPC"
  }
}

resource "aws_internet_gateway" "my_igw" {
  vpc_id = aws_vpc.my_vpc.id

  tags = {
    Name = "MyInternetGateway"
  }
}

resource "aws_subnet" "public_subnet" {
  vpc_id            = aws_vpc.my_vpc.id
  cidr_block        = var.subnet_cidrs[0]  # Use the first CIDR from the list for public subnet
  map_public_ip_on_launch = true

  tags = {
    Name = var.subnet_names[0]  # Use the first name for public subnet
    Tag = var.subnet_tags[0]    # Use the first tag for public subnet
  }
}

resource "aws_subnet" "private_subnet" {
  vpc_id     = aws_vpc.my_vpc.id
  cidr_block = var.subnet_cidrs[1]  # Use the second CIDR from the list for private subnet

  tags = {
    Name = var.subnet_names[1]  # Use the second name for private subnet
    Tag = var.subnet_tags[1]    # Use the second tag for private subnet
  }
}

resource "aws_security_group" "my_sg" {
  vpc_id = aws_vpc.my_vpc.id

  ingress {
    from_port   = var.ports[0]  # Use first port (22) from the list
    to_port     = var.ports[0]
    protocol    = "tcp"
    cidr_blocks = [var.from_whom]  # Allow access from the specified IP or CIDR
  }

  ingress {
    from_port   = var.ports[1]  # Use second port (80) from the list
    to_port     = var.ports[1]
    protocol    = "tcp"
    cidr_blocks = [var.from_whom]  # Allow access from the specified IP or CIDR
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "MySecurityGroup"
  }
}

resource "aws_instance" "public_instance" {
  ami             = var.instance_ami
  instance_type   = var.instance_type
  subnet_id       = aws_subnet.public_subnet.id
  key_name        = "ohio.pem"
  vpc_security_group_ids = [aws_security_group.my_sg.id]

  tags = {
    Name = "PublicEC2Instance"
  }
}


terraform plan   -var 'vpc_cidr=10.0.0.0/24'   -var 'subnet_cidrs=["10.0.0.0/25", "10.0.0.128/25"]'   -var 'from_whom=0.0.0.0/0'

terraform apply   -var 'vpc_cidr=10.0.0.0/24'   -var 'subnet_cidrs=["10.0.0.0/25", "10.0.0.128/25"]'   -var 'from_whom=0.0.0.0/0' --auto-approve
