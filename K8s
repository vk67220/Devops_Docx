Kubernetes:-  Orchestration platform

K8S is an orchestration platform means management.by using K8S we can manage
     - Docker containers
To automate the management of containers have to use Orchestration engines.
     -Docker swarm (outdated)
     -k8s(advanced version)
k8s is used to manage the containers of our app.
k8s will take care of containers deployment,scaling,de-scaling and containers load balancers

scaling the containers in docker swarm is manual process 

production related deployments we will use k8s and it is highly recommended


Clusters

k8s will run based on cluster
cluster is nothing but group of servers
one server is called as master node or control plane
remaining servers are called as worker nodes

Master node acts as a manager, worker nodes acts as team members







K8s architecture:-

in k8s most important component is master node/control plane

using 'kubectl' we can communicate with the Control Plane

in control plane we will have

API server 
scheduler
controller manager
etcd

worker nodes

kubelet --worker node agent
kube-proxy


A DevOps engineer submits a deployment request to the API server, which stores the request in etcd, the internal database of the Kubernetes cluster.

The API server is responsible for handling incoming requests from users and storing them in etcd.

The scheduler identifies pending requests in etcd and determines which worker node should execute the task. It makes this decision by communicating with kubelet.

The controller manager receives information from the scheduler via kubelet and instructs the worker node to create the container.

The controller manager is responsible for managing task execution on the worker node.

Within the pod, the container is created and runs the application.

The kube-proxy is a networking component in Kubernetes that maintains network rules on each node, enabling communication between services and pods within the cluster.



Kubernetes components:-

Pods:-

In K8S every container will be created inside the pod
Pod always runs inside the worker nodes
We can create multiple pods in a single node
Every pod will have unique IP address
whenever a pod dies, a new IP address will be created


How pods will communicate?

Each pod gets its own IP address. So each pod can communicate with each other using their internal IP address

K8S Manifest File
In Manifest yml file, there are 4 sections available;
	1. apiVersion
	2. kind
	3. metadata
	4. spec


Can we access the app running inside a pod?
NO. We cannot access app outside the pod. Because pods cannot be accessed outside of the cluster. By default, in K8S pods are specific to cluster.

To access the pods outside of the cluster, we need to expose the pods for outside access.
We will use K8S "Service" concept to expose the pods outside of the cluster

K8S Service concept is used to expose the pods outside of the cluster.
We have 3 types of K8S Services to expose the pods outside of cluster;
	1. Cluster IP
	2. Node Port
	3. Load Balancer

ClusterIP:

To access the pods within the cluster, we will use Cluster IP service
in Cluster IP service all the pods are mapped to single IP address, which is called as Static IP
expose the pods within the cluster, we can use Cluster IP service
This will generate Static IP to access the pods within the cluster
Cluster IP will not change when the pods are recreated

2. NodePort
Node Port is a service which is used to expose the pod outside of the cluster
When we are using Node Port service, we will specify the type as "NodePort" in service manifest file
if we dont specify the NodePort number, K8S will provide a random ip using which we have to access the app.
If we want to run our app on our own port number then specify the port number under nodePort in the service manifest file

any number can be given but it has to be b/w 30000 and 32767

3. Load Balancer

Load Balancer will distribute the traffic equally to all the Worker Nodes available in the cluster

Namespace:

Namespace is used to group the K8S components logically
We can create multiple namespaces in K8S cluster
Namespaces are isolated
Whenever we create the pods under a namespace, when we delete that namespace, all the pods inside that namespace will also gets DELETED


Always we need to create the pods using below K8S components;
1. Replication Controller
2. Replica Set
3. Deployment
4. Stateful Set
5. Daemon Set

If you create the pods using above K8S components, K8S will provide self healing capability. If you pod is crashed, K8S will recreate it.


1. Replication Controller (RC)
It is a K8S component to create pods
if i ask to create 5 pods for my app, if any one pod gets crashed, replication controller will create a new pod to match the given number of pods i.e 5
RC will take care of pod lifecycle
using RC, we can scale up and scale down the pods.






